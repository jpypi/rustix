stages:
  - build
  - deploy

.docker-build:
  # official docker image
  image: docker:latest
  # Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY


build-latest-rustix:
  extends: .docker-build
  stage: build
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --build-arg BuildEnv=prod --pull -t "$CI_REGISTRY_IMAGE/rustix${tag}" -f rustix.Dockerfile .
    - docker push "$CI_REGISTRY_IMAGE/rustix${tag}"
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        - rustix.Dockerfile
        - Cargo.lock
        - src/**/*.rs

build-latest-rustix-db-migration:
  extends: .docker-build
  stage: build
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE/rustix-db-migration${tag}" -f migration.Dockerfile .
    - docker push "$CI_REGISTRY_IMAGE/rustix-db-migration${tag}"
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        - migration.Dockerfile
        - Cargo.lock
        - diesel.toml
        - migrations/**/*.sql

deploy:
  stage: deploy
  script:
    - mkdir ~/.ssh
    - cat $DEPLOY_KEY > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - cat $DEPLOY_KNOWN_HOST > ~/.ssh/known_hosts
    - scp docker-compose.yml $DEPLOY_USER@$DEPLOY_HOST:rustix/docker-compose.yml
    - scp Makefile $DEPLOY_USER@$DEPLOY_HOST:rustix/Makefile
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd rustix ; make update"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
